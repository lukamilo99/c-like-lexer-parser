package raf.pp;
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 11 11:46:19 CET 2023
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 11 11:46:19 CET 2023
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\006\000\002\002\004\000\002\002" +
    "\006\000\002\002\006\000\002\002\006\000\002\003\006" +
    "\000\002\003\006\000\002\004\004\000\002\004\003\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\007\005\000\002\007\003\000\002\007\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\007\000\002\011\007\000" +
    "\002\011\007\000\002\005\004\000\002\005\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\006\000\002\012" +
    "\007\000\002\012\007\000\002\012\003\000\002\013\010" +
    "\000\002\013\010\000\002\014\010\000\002\014\010\000" +
    "\002\014\010\000\002\014\010\000\002\015\005\000\002" +
    "\015\003\000\002\016\005\000\002\016\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\005\000\002\024\005\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\003\005\004\006\001\002\000\004\002" +
    "\206\001\002\000\004\026\203\001\002\000\006\003\007" +
    "\026\010\001\002\000\004\027\201\001\002\000\006\003" +
    "\011\027\012\001\002\000\006\003\013\033\015\001\002" +
    "\000\006\003\013\033\015\001\002\000\004\021\016\001" +
    "\002\000\004\002\001\001\002\000\004\021\016\001\002" +
    "\000\012\003\ufff4\027\ufff4\032\ufff4\047\ufff4\001\002\000" +
    "\022\003\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9" +
    "\021\ufff9\033\ufff9\001\002\000\022\003\013\011\052\012" +
    "\064\013\061\015\053\016\055\021\063\033\015\001\002" +
    "\000\010\003\023\032\022\047\024\001\002\000\004\021" +
    "\051\001\002\000\016\005\033\006\027\007\032\010\030" +
    "\020\031\021\046\001\002\000\014\005\033\006\027\007" +
    "\032\010\030\020\031\001\002\000\006\003\uffee\031\uffee" +
    "\001\002\000\006\003\045\031\044\001\002\000\006\003" +
    "\uffef\031\uffef\001\002\000\006\003\ufff0\031\ufff0\001\002" +
    "\000\004\021\034\001\002\000\006\003\ufff1\031\ufff1\001" +
    "\002\000\006\003\ufff2\031\ufff2\001\002\000\006\003\035" +
    "\033\036\001\002\000\004\021\016\001\002\000\004\021" +
    "\016\001\002\000\006\003\040\034\041\001\002\000\006" +
    "\003\uffec\031\uffec\001\002\000\006\003\uffed\031\uffed\001" +
    "\002\000\004\034\043\001\002\000\006\003\uffeb\031\uffeb" +
    "\001\002\000\024\003\ufff8\011\ufff8\012\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\021\ufff8\033\ufff8\034\ufff8\001\002\000\024" +
    "\003\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\021" +
    "\ufff7\033\ufff7\034\ufff7\001\002\000\012\003\ufff3\027\ufff3" +
    "\032\ufff3\047\ufff3\001\002\000\004\031\050\001\002\000" +
    "\024\003\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6" +
    "\021\ufff6\033\ufff6\034\ufff6\001\002\000\012\003\ufff5\027" +
    "\ufff5\032\ufff5\047\ufff5\001\002\000\004\026\170\001\002" +
    "\000\004\026\161\001\002\000\024\003\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\015\uffe3\016\uffe3\021\uffe3\033\uffe3\034\uffe3" +
    "\001\002\000\004\026\152\001\002\000\024\003\013\011" +
    "\052\012\064\013\061\015\053\016\055\021\146\033\015" +
    "\034\151\001\002\000\022\003\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\015\ufffa\016\ufffa\021\ufffa\033\ufffa\001\002\000\024" +
    "\003\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\021" +
    "\uffe7\033\uffe7\034\uffe7\001\002\000\004\026\140\001\002" +
    "\000\024\003\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016" +
    "\uffe9\021\uffe9\033\uffe9\034\uffe9\001\002\000\012\003\ufff4" +
    "\030\135\032\ufff4\047\ufff4\001\002\000\004\026\066\001" +
    "\002\000\024\003\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\021\uffe8\033\uffe8\034\uffe8\001\002\000\010\021" +
    "\074\022\100\026\070\001\002\000\006\027\132\032\131" +
    "\001\002\000\010\021\074\022\100\026\070\001\002\000" +
    "\034\023\115\024\113\027\uffd4\031\uffd4\032\uffd4\035\116" +
    "\036\123\037\114\040\121\041\122\042\120\044\uffd4\045" +
    "\uffd4\001\002\000\014\027\uffdb\031\uffdb\032\uffdb\044\uffdb" +
    "\045\111\001\002\000\010\027\uffc5\032\uffc5\044\107\001" +
    "\002\000\042\023\uffc9\024\uffc9\025\uffc9\027\uffc9\031\uffc9" +
    "\032\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\001\002\000\042" +
    "\023\uffd6\024\uffd6\025\102\027\uffd6\031\uffd6\032\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\101" +
    "\044\uffd6\045\uffd6\046\103\001\002\000\042\023\uffca\024" +
    "\uffca\025\uffca\027\uffca\031\uffca\032\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\001\002\000\014\027\uffd9\031\uffd9\032\uffd9" +
    "\044\uffd9\045\uffd9\001\002\000\042\023\uffc8\024\uffc8\025" +
    "\uffc8\027\uffc8\031\uffc8\032\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\001\002\000\010\021\074\022\100\026\070\001\002" +
    "\000\010\021\074\022\100\026\070\001\002\000\010\021" +
    "\074\022\100\026\070\001\002\000\042\023\uffcc\024\uffcc" +
    "\025\uffcc\027\uffcc\031\uffcc\032\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\001\002\000\042\023\uffcd\024\uffcd\025\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\001" +
    "\002\000\042\023\uffcb\024\uffcb\025\uffcb\027\uffcb\031\uffcb" +
    "\032\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\001\002\000\010" +
    "\021\074\022\100\026\070\001\002\000\014\027\uffdc\031" +
    "\uffdc\032\uffdc\044\uffdc\045\111\001\002\000\010\021\074" +
    "\022\100\026\070\001\002\000\014\027\uffda\031\uffda\032" +
    "\uffda\044\uffda\045\uffda\001\002\000\010\021\074\022\100" +
    "\026\070\001\002\000\010\021\uffd0\022\uffd0\026\uffd0\001" +
    "\002\000\010\021\074\022\100\026\070\001\002\000\010" +
    "\021\uffd2\022\uffd2\026\uffd2\001\002\000\010\021\074\022" +
    "\100\026\070\001\002\000\010\021\uffce\022\uffce\026\uffce" +
    "\001\002\000\010\021\uffd1\022\uffd1\026\uffd1\001\002\000" +
    "\010\021\uffcf\022\uffcf\026\uffcf\001\002\000\010\021\uffd3" +
    "\022\uffd3\026\uffd3\001\002\000\020\023\115\024\113\027" +
    "\uffd5\031\uffd5\032\uffd5\044\uffd5\045\uffd5\001\002\000\042" +
    "\023\uffd8\024\uffd8\025\102\027\uffd8\031\uffd8\032\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\101" +
    "\044\uffd8\045\uffd8\046\103\001\002\000\042\023\uffd7\024" +
    "\uffd7\025\102\027\uffd7\031\uffd7\032\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\101\044\uffd7\045" +
    "\uffd7\046\103\001\002\000\006\027\130\044\107\001\002" +
    "\000\042\023\uffc7\024\uffc7\025\uffc7\027\uffc7\031\uffc7\032" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000\010\021" +
    "\074\022\100\026\070\001\002\000\004\031\133\001\002" +
    "\000\024\003\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\016" +
    "\uffe4\021\uffe4\033\uffe4\034\uffe4\001\002\000\010\027\uffc6" +
    "\032\uffc6\044\107\001\002\000\010\021\074\022\100\026" +
    "\070\001\002\000\006\031\137\044\107\001\002\000\024" +
    "\003\uffe6\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\021" +
    "\uffe6\033\uffe6\034\uffe6\001\002\000\010\021\074\022\100" +
    "\026\070\001\002\000\006\027\142\044\107\001\002\000" +
    "\006\003\143\014\144\001\002\000\022\003\013\011\052" +
    "\012\064\013\061\015\053\016\055\021\146\033\015\001" +
    "\002\000\022\003\013\011\052\012\064\013\061\015\053" +
    "\016\055\021\146\033\015\001\002\000\024\003\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\015\uffe2\016\uffe2\021\uffe2\033\uffe2" +
    "\034\uffe2\001\002\000\004\030\135\001\002\000\024\003" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\021\uffe1" +
    "\033\uffe1\034\uffe1\001\002\000\024\003\uffea\011\uffea\012" +
    "\uffea\013\uffea\015\uffea\016\uffea\021\uffea\033\uffea\034\uffea" +
    "\001\002\000\026\002\ufffc\003\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\021\ufffc\033\ufffc\034\ufffc\001\002" +
    "\000\010\021\074\022\100\026\070\001\002\000\006\027" +
    "\154\044\107\001\002\000\006\003\156\017\155\001\002" +
    "\000\022\003\013\011\052\012\064\013\061\015\053\016" +
    "\055\021\146\033\015\001\002\000\022\003\013\011\052" +
    "\012\064\013\061\015\053\016\055\021\146\033\015\001" +
    "\002\000\024\003\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd" +
    "\016\uffdd\021\uffdd\033\uffdd\034\uffdd\001\002\000\024\003" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\021\uffdf" +
    "\033\uffdf\034\uffdf\001\002\000\010\021\074\022\100\026" +
    "\070\001\002\000\006\027\163\044\107\001\002\000\006" +
    "\003\164\014\165\001\002\000\022\003\013\011\052\012" +
    "\064\013\061\015\053\016\055\021\146\033\015\001\002" +
    "\000\022\003\013\011\052\012\064\013\061\015\053\016" +
    "\055\021\146\033\015\001\002\000\024\003\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\015\uffe0\016\uffe0\021\uffe0\033\uffe0\034" +
    "\uffe0\001\002\000\024\003\uffde\011\uffde\012\uffde\013\uffde" +
    "\015\uffde\016\uffde\021\uffde\033\uffde\034\uffde\001\002\000" +
    "\004\021\016\001\002\000\010\003\172\027\173\032\022" +
    "\001\002\000\004\021\046\001\002\000\004\031\174\001" +
    "\002\000\024\003\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\021\uffe5\033\uffe5\034\uffe5\001\002\000\022\003" +
    "\013\011\052\012\064\013\061\015\053\016\055\021\063" +
    "\033\015\001\002\000\024\003\013\011\052\012\064\013" +
    "\061\015\053\016\055\021\146\033\015\034\177\001\002" +
    "\000\026\002\ufffb\003\ufffb\011\ufffb\012\ufffb\013\ufffb\015" +
    "\ufffb\016\ufffb\021\ufffb\033\ufffb\034\ufffb\001\002\000\004" +
    "\002\uffff\001\002\000\006\003\013\033\015\001\002\000" +
    "\004\002\ufffe\001\002\000\004\027\204\001\002\000\006" +
    "\003\013\033\015\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\177\001\001\000\004\003\013\001" +
    "\001\000\010\004\174\006\016\007\020\001\001\000\002" +
    "\001\001\000\010\004\017\006\016\007\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\053\005\055" +
    "\006\056\007\020\012\061\013\057\014\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\046\011\024" +
    "\001\001\000\006\010\025\011\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\041\007\020\001\001\000\006" +
    "\006\036\007\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\053\012\147\013\057\014\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\072\016\071\017\070\020\076\022" +
    "\074\023\075\024\066\001\001\000\002\001\001\000\016" +
    "\015\126\016\071\017\070\020\076\022\074\023\075\001" +
    "\001\000\004\021\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\105" +
    "\001\001\000\004\023\104\001\001\000\004\023\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\107\017\070\020\076\022\074\023\075\001" +
    "\001\000\002\001\001\000\012\017\070\020\111\022\074" +
    "\023\075\001\001\000\002\001\001\000\006\022\125\023" +
    "\075\001\001\000\002\001\001\000\006\022\124\023\075" +
    "\001\001\000\002\001\001\000\010\017\123\022\074\023" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\133\016\071\017\070\020\076\022\074\023" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\135\016\071\017\070\020\076\022" +
    "\074\023\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\140\016\071\017\070\020\076\022\074\023" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\053\012\146\013\057\014\064\001\001\000\012\003" +
    "\053\012\144\013\057\014\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\152\016\071\017\070\020\076" +
    "\022\074\023\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\053\012\157\013\057\014\064\001\001" +
    "\000\012\003\053\012\156\013\057\014\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\161\016\071" +
    "\017\070\020\076\022\074\023\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\053\012\166\013\057" +
    "\014\064\001\001\000\012\003\053\012\165\013\057\014" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\053\005\175" +
    "\006\056\007\020\012\061\013\057\014\064\001\001\000" +
    "\012\003\053\012\147\013\057\014\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\204\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public int errNo = 0;

  public String getLine() {
    return String.valueOf(((MPLexer) getScanner()).getLine());
  }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpressionList ::= Expression 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",18, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",18, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Factor ::= LP Expression RP 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",17, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Factor ::= CONST 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",17, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Factor ::= ID 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",17, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Term ::= Term POW Factor 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= Term DIV Factor 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Term ::= Term MUL Factor 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelOp ::= DIFF 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= MTO 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelOp ::= LTO 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelOp ::= MT 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelOp ::= LT 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelExpression ::= ArExpression 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelExpression",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelExpression",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ArExpression ::= Term 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ArExpression ::= ArExpression MINUS Term 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ArExpression ::= ArExpression PLUS Term 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AndExpression ::= RelExpression 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("AndExpression",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("AndExpression",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= AndExpression 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Loop ::= FOR LP Expression RP error Statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
                System.out.println("Niste stavili DO kljucnu rec" + " - linija " + parser.getLine());
                parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Loop",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Loop ::= WHILE LP Expression RP error Statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
                System.out.println("Niste stavili THEN kljucnu rec" + " - linija " + parser.getLine());
                parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Loop",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Loop ::= FOR LP Expression RP DO Statement 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Loop",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Loop ::= WHILE LP Expression RP THEN Statement 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Loop",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IfStatement ::= IF LP Expression RP error Statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
                System.out.println("Niste stavili THEN kljucnu rec" + " - linija " + parser.getLine());
                parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IfStatement ::= IF LP Expression RP THEN Statement 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= WRITE LP ExpressionList RP SEMICOLON 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= READ LP NameList RP SEMICOLON 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= Loop 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Structure ::= STRUCT ID error VarDecl RCB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
                System.out.println("Niste otvorili strukturu" + " - linija " + parser.getLine());
                parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Structure",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Structure ::= STRUCT ID LCB VarDecl error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.peek()).value;
		
             	System.out.println("Niste zatovorili strukturu" + " - linija " + parser.getLine());
            	parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Structure",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Structure ::= STRUCT ID LCB VarDecl RCB 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Structure",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= Structure 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= REAL 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= BOOL 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= CHAR 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= NameList error ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
             	System.out.println("Niste lepo odvojiti imena promenjivih" + " - linija " + parser.getLine());
            	parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NameList",5, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= ID 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NameList",5, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NameList ::= NameList COMMA ID 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NameList",5, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= NameList error Type SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
                System.out.println("Niste iskoristili adekvatan simbol dodele" + " - linija " + parser.getLine());
                parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= NameList DOTDOT Type error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.peek()).value;
		
             	System.out.println("Niste stavili ; na kraju deklaracije promenjive" + " - linija " + parser.getLine());
            	parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= NameList DOTDOT Type SEMICOLON 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarList ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarList",2, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarList ::= VarList VarDecl 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarList",2, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= error VarList StatementList RCB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
                System.out.println("Niste otvorili MAIN metodu" + " - linija " + parser.getLine());
                parser.errNo++;
           
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= LCB VarList StatementList RCB 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error LP RP Block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
            	System.out.println("Nedostaje MAIN na pocetku" + " - linija " + parser.getLine());
            	parser.errNo++;
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= MAIN error RP Block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
            	System.out.println("Nedostaje otvorena zagrada u MAIN" + " - linija " + parser.getLine());
                parser.errNo++;
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LP error Block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
               System.out.println( "Nedostaje zatvorena zagrada u MAIN" + " - linija " + parser.getLine());
               parser.errNo++;
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LP RP Block 
            {
              Object RESULT =null;

              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

